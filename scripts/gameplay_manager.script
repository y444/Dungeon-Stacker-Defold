local starting_row = 1
local starting_length = 3
local starting_speed = 0.5
local starting_time = 15
local speedup_factor = 1 --0.85
local panels = {}
local gameplay_started = false
local field_reset = true
local hero_url = nil

local function reset_gamefield(self)
	go.delete(panels, true)
	panels = {}
	self.row = starting_row
	self.length = starting_length
	self.speed = starting_speed
	go.set("/HUD#hud", "time", starting_time)
	msg.post("/torches#torches", "lightup", {amount = 0})
	if hero_url ~= nil then
		go.delete(self.hero_id)
		self.hero_id = nil
		self.hero_url = nil
	end
	self.hero_id = factory.create("#hero_factory", vmath.vector3(72, 16, 8))
	hero_url = msg.url(self.hero_id)
	hero_url.fragment = "hero"
	field_reset = true
end

local function start_gameplay(self)
	go.set("/HUD#hud", "time_is_ticking", true)
	gameplay_started = true
end

local function stop_gameplay(self)
	go.set("/HUD#hud", "time_is_ticking", false)
	gameplay_started = false
	field_reset = false
end

local function get_stop_pos(stop_x)
	return (stop_x - 8) / 16
end

local function change_length(self)
	local prev_stop_pos = 3
	if self.row > 1 then prev_stop_pos = go.get(panels[#panels-1], "stop_pos") end
	local prev_stop_blocks = {3, 4, 5}
	if self.row > 1 then
		prev_stop_blocks = {}
		for i = prev_stop_pos, go.get(panels[#panels-1], "length") + prev_stop_pos - 1 do
			table.insert(prev_stop_blocks, i)
		end
	end
	local stop_pos = go.get(panels[#panels], "stop_pos")
	local stop_blocks = {}
	for i = stop_pos, go.get(panels[#panels], "length") + stop_pos - 1 do
		table.insert(stop_blocks, i)
	end
	local dead_blocks = {}
	for i = 1, #stop_blocks do
		local block_dead = true
		for j = 1, #prev_stop_blocks do
			if stop_blocks[i] == prev_stop_blocks[j] then
				block_dead = false
				break
			end
		end
		if block_dead then table.insert(dead_blocks, i) end
	end
	if stop_pos < prev_stop_pos then
		go.set(panels[#panels], "stop_pos", prev_stop_pos)
	end
	msg.post(panels[#panels], "trim", {dead = dead_blocks})
	self.length = self.length - #dead_blocks
	if self.length < 0 then self.length = 0 end
end

local function spawn_panel(self)
	local panel_properties = {row = self.row, length = self.length, speed = self.speed}
	local panel_id = factory.create("#panel_factory", nil, nil, panel_properties)
	local panel_url = msg.url(panel_id)
	panel_url.fragment = "panel"
	table.insert(panels, panel_url)
end

local function raise_level(self)
	self.row = self.row + 1
	self.speed = self.speed * speedup_factor
end

function init(self)
	msg.post(".", "acquire_input_focus")
	reset_gamefield(self)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local last_panel = panels[#panels]
		if gameplay_started == false and field_reset == true then start_gameplay(self) end
		if (#panels == 15 or self.length == 0) and go.get(last_panel, "is_moving") == false then
			reset_gamefield(self)
			return
		end
		if last_panel and go.get(last_panel, "is_moving") then
			go.set(last_panel, "is_moving", false)
			go.set(last_panel, "stop_pos", get_stop_pos(go.get_position(last_panel).x))
			change_length(self)
			if self.length ~= 0 then
				msg.post("/torches#torches", "lightup", {amount = self.row})
				msg.post(hero_url, "move", {target_panel = last_panel, target_length = self.length})
				raise_level(self)
			else
				stop_gameplay(self)
			end
		end
		if #panels < 15 and self.length ~= 0 then
			spawn_panel(self)
		end
	end
end
