local w = require("modules.world")

local function spawn_hero(self)
	w.hero = {}
	w.hero.dead = false
	w.hero.is_moving = true
	w.hero.move_targets = {}
	w.hero.move_dir = vmath.vector3()
	w.hero.speed = w.HERO_SPEED
	w.hero.delay = w.HERO_DELAY
	w.hero.id = factory.create(w.hero_factory, w.HERO_START_POS)
end

local function spawn_skull(self)
	w.skull = {}
	w.skull.is_chasing = false
	w.skull.speed = w.SKULL_SPEED
	w.skull.delay = w.SKULL_DELAY
	w.skull.id = factory.create(w.skull_factory, w.SKULL_START_POS)
end

local function despawn_skull(self)
	w.skull.is_chasing = false
	if w.skull.id ~= nil then
		sprite.play_flipbook(msg.url(nil, w.skull.id, "sprite"), "skull_disappear", function()
			go.delete(w.skull.id)
			w.skull.id = nil
		end)
	end
end

local function spawn_chest(self)
	local new_chest = {}
	new_chest.row = 16
	new_chest.type = w.REWARD_TYPES.CHEST
	new_chest.state = w.REWARD_STATES.ACTIVE
	table.insert(w.rewards, new_chest)
	w.chest = factory.create(w.chest_factory, w.CHEST_START_POS, nil, {n = #w.rewards})
	new_chest.id = w.chest
end

local function reset_gamefield()
	if w.hero.id ~= nil then go.delete(w.hero.id) end
	if w.chest ~= nil then go.delete(w.chest) end
	w.row = w.STARTING_ROW
	w.length = w.STARTING_LENGTH
	w.speed = w.STARTING_SPEED
	w.time = w.STARTING_TIME
	w.score = w.STARTING_SCORE
	w.panel_moving = false
	for _, panel in ipairs(w.panels) do go.delete(panel.id, true) end
	w.panels = {}
	w.rewards = {}
	spawn_hero(self)
	spawn_chest(self)
	msg.post(w.torches, "lightup", {amount = 15})
	msg.post(w.hud, "reset_hud")
end

local function add_hero_target(self)
	local new_target = vmath.vector3()
	local panel = w.panels[#w.panels]
	if not custom_target then
		for _, block in ipairs(panel.blocks) do
			new_target.x = go.get_world_position(block).x
			if new_target.x == go.get(w.hero.id, "position.x") then break end
		end
		new_target.y = go.get(panel.id, "position.y")
	else
		new_target.x = custom_target.x
		new_target.y = custom_target.y
	end
	table.insert(w.hero.move_targets, new_target)
end

local function move_hero_to_chest(self)
	table.insert(w.hero.move_targets, w.hero.move_targets[#w.hero.move_targets] + vmath.vector3(0,16,0))
	table.insert(w.hero.move_targets, w.CHEST_START_POS)
end

local function switch_gamestate(self, new_gamestate)
	if new_gamestate == w.GAMESTATE.START then
		print("start")
		timer.delay(0, false, reset_gamefield)
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.HIDE, intent = w.POPUP_INTENTS.LOSE})
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.HIDE, intent = w.POPUP_INTENTS.WIN})
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.SHOW, intent = w.POPUP_INTENTS.START})
		self.ticker = 0
		w.gamestate = w.GAMESTATE.START
		
	end
	if new_gamestate == w.GAMESTATE.PLAY then
		print("play")
		timer.delay(0, false, function() msg.post(w.hud, "show") end)
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.HIDE, intent = w.POPUP_INTENTS.START})
		msg.post(w.torches, "lightup", {amount = 0})
		w.gamestate = w.GAMESTATE.PLAY
	end
	if new_gamestate == w.GAMESTATE.WIN then
		print("win")
		msg.post(w.torches, "lightup", {amount = 15})
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.SHOW, intent = w.POPUP_INTENTS.WIN})
		move_hero_to_chest(self)
		despawn_skull(self)
		w.gamestate = w.GAMESTATE.WIN
	end
	if new_gamestate == w.GAMESTATE.LOSE then
		print("lose")
		msg.post(w.popups, "switch", {new_state = w.POPUP_STATES.SHOW, intent = w.POPUP_INTENTS.LOSE})
		msg.post(w.torches, "lightup", {amount = 0})
		despawn_skull(self)
		switch_gamestate(self, w.GAMESTATE.END)
	end
	if new_gamestate == w.GAMESTATE.END then
		print("end")
		msg.post(w.hud, "hide")
		w.gamestate = w.GAMESTATE.END
	end
end

local function spawn_panel(self)
	local new_panel = {}
	new_panel.row = w.row
	new_panel.length = w.length
	new_panel.speed = w.speed - w.SPEEDUP_FACTOR * (w.row - 1)
	new_panel.dir = w.PANEL_DIRECTIONS[math.random(#w.PANEL_DIRECTIONS)]
	new_panel.left_pos = w.PANEL_START_POS + vmath.vector3(0, 16, 0) * w.row
	new_panel.right_pos = new_panel.left_pos + vmath.vector3(16, 0, 0) * (7 - w.length)
	local start_pos
	if new_panel.dir == w.LEFT then
		start_pos = new_panel.right_pos 
	else start_pos = new_panel.left_pos 
	end
	new_panel.is_moving = true
	table.insert(w.panels, new_panel)
	new_panel.id = factory.create(w.panel_factory, start_pos, nil, {n = new_panel.row})
	w.panel_moving = true
end

local function stop_panel(self)
	local panel = w.panels[#w.panels]
	panel.is_moving = false
	panel.left_limit = go.get_position(panel.id).x
	local prev_left_limit = w.STARTING_LEFT_LIMIT
	local prev_right_limit = w.STARTING_LEFT_LIMIT + 16 * (w.STARTING_LENGTH - 1)
	if #w.panels > 1 then
		prev_left_limit = w.panels[#w.panels-1].left_limit
		prev_right_limit = w.panels[#w.panels-1].left_limit + 16 * (w.panels[#w.panels-1].length - 1)
	end
	for i = #panel.blocks, 1, -1 do
		local x = go.get_world_position(panel.blocks[i]).x
		if x < prev_left_limit or x > prev_right_limit then
			go.delete(panel.blocks[i], true)
			table.remove(panel.blocks, i)
		end
	end
	if go.get_position(panel.id).x < go.get_world_position(panel.blocks[1]).x then
		local diff = go.get_world_position(panel.blocks[1]).x - go.get_position(panel.id).x
		local pos = go.get(panel.id, "position.x")
		go.set(panel.id, "position.x", pos  + diff)
		panel.left_limit = go.get_position(panel.id).x
		for _, block in ipairs(panel.blocks) do
			local pos = go.get(block, "position.x")
			go.set(block, "position.x", pos - diff)
		end
	end
	panel.length = #panel.blocks
	w.length = panel.length	
	msg.post(msg.url(nil, panel.id, "panel"), "stop")
	w.panel_moving = false
end

local function raise_level(self)
	msg.post(w.torches, "lightup", {amount = w.row})
	w.row = w.row + 1
end

local function is_game_lost(self)
	return w.length == 0 or w.hero_dead == true
end

local function is_game_won(self)
	return w.row == 15 and w.panel_moving == false and w.hero.dead == false
end

function update(self, dt)
	if w.gamestate == w.GAMESTATE.PLAY then
		self.ticker = self.ticker + dt
		if self.ticker >= 1 and w.time > 0 then
			self.ticker = 0
			w.time = w.time - 1
			msg.post(w.hud, "update_time", {time = w.time})
			if w.time == 0 then spawn_skull(self) end
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	switch_gamestate(self, w.GAMESTATE.START)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if w.gamestate == w.GAMESTATE.START then
			switch_gamestate(self, w.GAMESTATE.PLAY)
		end
		if w.gamestate == w.GAMESTATE.PLAY then
			if w.panel_moving == true then
				stop_panel(self)
				if is_game_lost(self) then
					switch_gamestate(self, w.GAMESTATE.LOSE)
					return
				end
				add_hero_target(self, nil)
				if is_game_won(self) then
					switch_gamestate(self, w.GAMESTATE.WIN)
					return
				end
				raise_level(self)
			end
			spawn_panel(self)
		end
		if w.gamestate == w.GAMESTATE.WIN and w.chest == nil then
			switch_gamestate(self, w.GAMESTATE.END)
		end
		if w.gamestate == w.GAMESTATE.END then
			switch_gamestate(self, w.GAMESTATE.START)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collected") then
		w.score = w.score + message.amount
		msg.post(w.hud, "update_score", {score = w.score})
	end
	if message_id == hash("killed") then
		sprite.play_flipbook(msg.url(nil, w.hero.id, "sprite"), "hero_death")
		switch_gamestate(self, w.GAMESTATE.LOSE)
	end
end