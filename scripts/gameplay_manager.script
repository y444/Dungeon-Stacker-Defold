local w = require("modules.world")

local function reset_gamefield()
	w.row = w.STARTING_ROW
	w.column = w.STARTING_COLUMN
	w.length = w.STARTING_LENGTH
	w.speed = w.STARTING_SPEED
	w.time = w.STARTING_TIME
	w.score = w.STARTING_SCORE
	w.panel_moving = false
	msg.post(w.torches, "lightup", {amount = 15})
	msg.post(w.hud, "update_score", {score = w.score})
	msg.post(w.hud, "update_time", {time = w.time})
	if w.hero ~= nil then go.delete(w.hero) end
	w.hero = factory.create(w.hero_factory, w.HERO_START_POS)
	for _, id in ipairs(w.panels) do go.delete(id, true) end
	w.panels = {}
	for _, id in ipairs(w.rewards) do go.delete(id, true) end
	w.rewards = {}
	table.insert(w.rewards, factory.create(w.chest_factory, w.CHEST_START_POS))
end

local function switch_gamestate(self, new_gamestate)
	if new_gamestate == w.GAMESTATE.START then
		reset_gamefield(self)
		self.ticker = 0
		w.gamestate = w.GAMESTATE.START
	end
	if new_gamestate == w.GAMESTATE.PLAY then
		msg.post(w.torches, "lightup", {amount = 0})
		w.gamestate = w.GAMESTATE.PLAY
	end
	if new_gamestate == w.GAMESTATE.WIN then
		w.gamestate = w.GAMESTATE.WIN
	end
	if new_gamestate == w.GAMESTATE.LOSE then
		w.gamestate = w.GAMESTATE.LOSE
	end
	if new_gamestate == w.GAMESTATE.END then
		w.gamestate = w.GAMESTATE.END
	end
end

local function spawn_panel(self)
	new_panel = {}
	new_panel.row = w.row
	new_panel.length = w.length
	new_panel.speed = w.speed - w.SPEEDUP_FACTOR * (w.row - 1)
	new_panel.dir = w.PANEL_DIRECTIONS[math.random(#w.PANEL_DIRECTIONS)]
	new_panel.left_pos = w.PANEL_START_POS + vmath.vector3(0, 16, 0) * w.row
	new_panel.right_pos = new_panel.left_pos + vmath.vector3(16, 0, 0) * (7 - w.length)
	local start_pos
	if new_panel.dir == w.LEFT then
		start_pos = new_panel.right_pos 
	else start_pos = new_panel.left_pos 
	end
	new_panel.is_moving = true
	table.insert(w.panels, new_panel)
	new_panel.id = factory.create(w.panel_factory, start_pos, nil, {n = new_panel.row})
	
end

function update(self, dt)
	if w.gamestate == w.GAMESTATE.PLAY then
		self.ticker = self.ticker + dt
		if self.ticker >= 1 and w.time > 0 then
			self.ticker = 0
			w.time = w.time - 1
			msg.post(w.hud, "update_time", {time = w.time})
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	switch_gamestate(self, w.GAMESTATE.START)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if w.gamestate == w.GAMESTATE.START then
			switch_gamestate(self, w.GAMESTATE.PLAY)
		end
		if w.gamestate == w.GAMESTATE.PLAY then
			spawn_panel(self)
			w.row = w.row + 1 -- temp
		end
	end
end

function on_message(self, message_id, message, sender)
	
end