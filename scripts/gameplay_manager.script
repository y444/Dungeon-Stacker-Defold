world = require("modules.world")

local STARTING_ROW = 0
local STARTING_COLUMN_LEFT = 3
local STARTING_COLUMN_RIGHT = 5
local STARTING_LENGTH = 3
local STARTING_SPEED = 0.588
local STARTING_TIME = 15
local STARTING_SCORE = 0
local SPEEDUP_FACTOR = 0.85
local HERO_START_POS = vmath.vector3(72, 16, 8)
local SKULL_START_POS = vmath.vector3(72, 8, 8)
local GAMESTATE = { START = 1, PLAY = 2, WIN = 3, LOSE = 4, END = 5 }

local function stop_panel(self)
end


local function despawn_skull(self)
	if world.skull ~= nil then go.delete(world.skull) end --replace with sending a message to play death animation and self-destruct
	world.skull = nil
end

local function switch_gamestate(self, new_gamestate)
	if new_gamestate == GAMESTATE.START
	then
		world.row = STARTING_ROW
		world.column_left = STARTING_COLUMN_LEFT
		world.column_right = STARTING_COLUMN_RIGHT
		world.length = STARTING_LENGTH
		world.speed = STARTING_SPEED
		world.time = STARTING_TIME
		msg.post("/HUD#hud", "update_time", {time = world.time})
		world.score = STARTING_SCORE
		msg.post("/HUD#hud", "update_score", {score = world.score})
		world.panel_moving = false
		world.despawn_panels()
		despawn_skull(self)
		world.spawn_hero(HERO_START_POS)
		world.gamestate = GAMESTATE.START
	end
	if new_gamestate == GAMESTATE.PLAY then
		world.gamestate = GAMESTATE.PLAY
	end
	if new_gamestate == GAMESTATE.WIN then
		switch_gamestate(self, GAMESTATE.END)
	end
	if new_gamestate == GAMESTATE.LOSE then
		switch_gamestate(self, GAMESTATE.END)
	end
	if new_gamestate == GAMESTATE.END then
		
		world.gamestate = GAMESTATE.END
	end
end

local function raise(self)
	world.row = world.row + 1
	world.speed = world.speed * SPEEDUP_FACTOR
end

function init(self)
	msg.post(".", "acquire_input_focus")
	switch_gamestate(self, GAMESTATE.START)
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if world.gamestate == GAMESTATE.END then
			switch_gamestate(self, GAMESTATE.START)
			return
		end
		if world.gamestate == GAMESTATE.START then
			switch_gamestate(self, GAMESTATE.PLAY)
		end
		if world.gamestate == GAMESTATE.PLAY then
			if #world.panels > 0 then stop_panel(self) end
			if world.length == 0 then
				switch_gamestate(self, GAMESTATE.LOSE)
				return
			end
			raise(self)
			if world.row == 16 then
				switch_gamestate(self, GAMESTATE.WIN)
				return
			end
			world.spawn_panel()
		end
	end
end