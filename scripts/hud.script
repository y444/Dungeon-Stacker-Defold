--almost done, test reward

local w = require("modules.world")

local function shake(self, url)
	go.animate(url, "position.y", go.PLAYBACK_ONCE_PINGPONG, 2, go.EASING_LINEAR, 0.2)
end

local function blink(self, label_url, mask_url, color)
	go.animate(label_url, "color", go.PLAYBACK_ONCE_PINGPONG, color, go.EASING_LINEAR, 0.2)
	go.animate(mask_url, "tint.w", go.PLAYBACK_ONCE_PINGPONG, 1, go.EASING_LINEAR, 0.2)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_score") then
		label.set_text(w.money_label, message.score)
		blink(self, w.money_label, w.money_icon_mask, w.YELLOW_COLOR)
		shake(self, w.money_counter)
	end
	if message_id == hash("update_time") then
		label.set_text(w.countdown_label, message.time)
		if message.time <= 3 then
			go.set(w.countdown_label, "color", w.RED_COLOR)
			go.set(w.countdown_icon_mask, "tint.w", 1)
			if message.time > 0 then sound.play("#sound_countdown_tick")
			elseif message.time == 0 then sound.play("#sound_countdown_zero")
			end
		else
			go.set(w.countdown_label, "color", w.GREY_COLOR)
			go.set(w.countdown_icon_mask, "tint.w", 0)
			blink(self, w.countdown_label, w.countdown_icon_mask, w.RED_COLOR)
		end
		shake(self, w.countdown_counter)
	end
	if message_id == hash("reset_hud") then
		label.set_text(w.money_label, w.STARTING_SCORE)
		label.set_text(w.countdown_label, w.STARTING_TIME)
		go.set(w.countdown_icon_mask, "tint.w", 0)
		go.set(w.money_icon_mask, "tint.w", 0)
		go.set(w.countdown_label, "color", w.GREY_COLOR)
		go.set(w.money_label, "color", w.GREY_COLOR)
	end
	if message_id == hash("show") then
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get(".", "position.y") - 24, go.EASING_LINEAR, 0)
	end
	if message_id == hash("hide") then
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get(".", "position.y") + 24, go.EASING_LINEAR, 0)
	end
end