local w = require("modules.world")

go.property("n", 0)

local function make_borders(self)
	-- for i = 1, #self.blocks do
	-- 	if i == 1 then
	-- 		local border_pos = vmath.vector3(-16, 0, -1) 
	-- 		local border_id = factory.create("#border_factory", border_pos, nil, {side = 0})
	-- 		go.set_parent(border_id, self.blocks[i])
	-- 	end
	-- 	if i == #self.blocks then
	-- 		local border_pos = vmath.vector3(16, 0, -1) 
	-- 		local border_id = factory.create("#border_factory", border_pos, nil, {side = 1})
	-- 		go.set_parent(border_id, self.blocks[i])
	-- 	end
	-- 	local top_border_url = self.blocks[i]
	-- 	top_border_url.fragment = "border_sprite"
	-- 	msg.post(top_border_url, "enable")
	-- end
end

local function stop(self, target_column_left, target_column_right)
	-- self.is_moving = false
	-- for i = #self.blocks, 1, -1 do
	-- 	local column = (go.get_world_position(self.blocks[i]).x - 8) / 16
	-- 	if column < target_column_left or column > target_column_right then
	-- 		go.delete(self.blocks[i], true)
	-- 		table.remove(self.blocks, i)
	-- 	end
	-- end
	-- if go.get_position() ~= go.get_world_position(self.blocks[1]) then
	-- 	local cor = go.get_position() - go.get_world_position(self.blocks[1])
	-- 	go.set_position(go.get_position() - cor)
	-- 	for i = 1, #self.blocks do
	-- 		go.set_position(go.get_position(self.blocks[i]) + cor, self.blocks[i])
	-- 	end
	-- end
	-- self.length = #self.blocks
	-- ---
	-- world.length = self.length
	-- world.column_left = (go.get_world_position(self.blocks[1]).x - 8) / 16
	-- world.column_right = world.column_left + self.length - 1
	-- make_borders(self)
end

function update(self, dt)
	if self.is_moving then
		local position = go.get_position()
		if self.timer <= 0 then
			self.timer = self.speed
			if position == self.panel.left_position or position == self.panel.right_position then self.panel.direction = -self.panel.direction end
			go.set_position(vmath.vector3(position.x - self.panel.direction * 16, position.y, position.z))
		end
		self.timer = self.timer - dt
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop") then
		make_borders(self)
	end
end