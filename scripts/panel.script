local w = require("modules.world")

go.property("n", 0)

local function spawn_blocks(self)
	self.panel.blocks = {}
	for i = 1, self.panel.length do
		local block_position = vmath.vector3((i - 1) * 16, 0, 0)
		local block_id = factory.create(w.block_factory, block_position)
		table.insert(self.panel.blocks, block_id)
		go.set_parent(block_id, msg.url())
	end
end

local function make_borders(self)
	for i = 1, #self.panel.blocks do
		if i == 1 then
			local border_pos = vmath.vector3(-16, 0, -1) 
			local border_id = factory.create(w.border_factory, border_pos, nil, {side = 0})
			go.set_parent(border_id, self.panel.blocks[i])
		end
		if i == #self.panel.blocks then
			local border_pos = vmath.vector3(16, 0, -1) 
			local border_id = factory.create(w.border_factory, border_pos, nil, {side = 1})
			go.set_parent(border_id, self.panel.blocks[i])
		end
		-- local top_border_url = self.blocks[i]
		-- top_border_url.fragment = "border_sprite"
		msg.post(msg.url(nil, self.panel.blocks[i], "border_sprite"), "enable")
	end
end

local function stop(self, target_column_left, target_column_right)
	-- self.is_moving = false
	-- for i = #self.blocks, 1, -1 do
	-- 	local column = (go.get_world_position(self.blocks[i]).x - 8) / 16
	-- 	if column < target_column_left or column > target_column_right then
	-- 		go.delete(self.blocks[i], true)
	-- 		table.remove(self.blocks, i)
	-- 	end
	-- end
	-- if go.get_position() ~= go.get_world_position(self.blocks[1]) then
	-- 	local cor = go.get_position() - go.get_world_position(self.blocks[1])
	-- 	go.set_position(go.get_position() - cor)
	-- 	for i = 1, #self.blocks do
	-- 		go.set_position(go.get_position(self.blocks[i]) + cor, self.blocks[i])
	-- 	end
	-- end
	-- self.length = #self.blocks
	-- ---
	-- world.length = self.length
	-- world.column_left = (go.get_world_position(self.blocks[1]).x - 8) / 16
	-- world.column_right = world.column_left + self.length - 1
	-- make_borders(self)
end

function init(self)
	self.panel = w.panels[self.n]
	self.ticker = 0
	spawn_blocks(self)
end

function update(self, dt)
	if self.panel.is_moving then
		self.ticker = self.ticker + dt
		local pos = go.get(".", "position.x")
		if self.ticker >= self.panel.speed then
			self.ticker = 0
			if pos == self.panel.left_pos.x or pos == self.panel.right_pos.x then
				self.panel.dir = -self.panel.dir
			end
			go.set(".", "position.x", pos - self.panel.dir * 16)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop") then
		make_borders(self)
	end
end