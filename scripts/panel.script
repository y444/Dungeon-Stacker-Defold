-- done

local w = require("modules.world")

go.property("n", 0)

local function add_reward(self)
	local block_number = math.random(self.panel.length)
	if (self.panel.row == 1 or self.panel.row == 11) and self.panel.length == 3 then block_number = 2 end
	local reward = w.REWARD_TYPES.COIN
	local reward_factory = w.coin_factory
	if self.panel.row == w.SMALL_CHEST_ROW then
		reward = w.REWARD_TYPES.SMALL_CHEST
		reward_factory = w.small_chest_factory
	end
	local new_reward = factory.create(reward_factory, vmath.vector3(0, 0, 1), nil, {amount = reward})
	go.set_parent(new_reward, self.panel.blocks[block_number])
end

local function spawn_blocks(self)
	self.panel.blocks = {}
	for i = 1, self.panel.length do
		local block_position = vmath.vector3((i - 1) * 16, 0, 0)
		local block_id = factory.create(w.block_factory, block_position)
		table.insert(self.panel.blocks, block_id)
		go.set_parent(block_id, msg.url())
	end
	add_reward(self)
end

local function make_borders(self)
	for i = 1, #self.panel.blocks do
		if i == 1 then
			local border_pos = vmath.vector3(-16, 0, -1) 
			local border_id = factory.create(w.border_factory, border_pos, nil, {side = 0})
			go.set_parent(border_id, self.panel.blocks[i])
		end
		if i == #self.panel.blocks then
			local border_pos = vmath.vector3(16, 0, -1) 
			local border_id = factory.create(w.border_factory, border_pos, nil, {side = 1})
			go.set_parent(border_id, self.panel.blocks[i])
		end
		msg.post(msg.url(nil, self.panel.blocks[i], "border_sprite"), "enable")
	end
end

function init(self)
	self.panel = w.panels[self.n]
	self.ticker = 0
	spawn_blocks(self)
end

function update(self, dt)
	if self.panel.is_moving then
		self.ticker = self.ticker + dt
		local pos = go.get(".", "position.x")
		if self.ticker >= self.panel.speed then
			self.ticker = 0
			if pos == self.panel.left_pos.x or pos == self.panel.right_pos.x then
				self.panel.dir = -self.panel.dir
			end
			go.set(".", "position.x", pos - self.panel.dir * 16)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stop") then
		make_borders(self)
	end
end